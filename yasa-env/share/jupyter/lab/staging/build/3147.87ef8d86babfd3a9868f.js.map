{"version":3,"file":"3147.87ef8d86babfd3a9868f.js?v=87ef8d86babfd3a9868f","mappings":"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","sources":["webpack://@jupyterlab/application-top/./node_modules/@lckr/jupyterlab_variableinspector/lib/handler.js","webpack://@jupyterlab/application-top/./node_modules/@lckr/jupyterlab_variableinspector/lib/inspectorscripts.js","webpack://@jupyterlab/application-top/./node_modules/@lckr/jupyterlab_variableinspector/lib/kernelconnector.js","webpack://@jupyterlab/application-top/./node_modules/@lckr/jupyterlab_variableinspector/lib/manager.js","webpack://@jupyterlab/application-top/./node_modules/@lckr/jupyterlab_variableinspector/lib/variableinspector.js","webpack://@jupyterlab/application-top/./node_modules/@lckr/jupyterlab_variableinspector/lib/tokens.js","webpack://@jupyterlab/application-top/./node_modules/@lckr/jupyterlab_variableinspector/lib/index.js"],"sourcesContent":["import { Signal } from '@lumino/signaling';\nimport { JSONModel } from '@lumino/datagrid';\nclass AbstractHandler {\n    constructor(connector) {\n        this._isDisposed = false;\n        this._disposed = new Signal(this);\n        this._inspected = new Signal(this);\n        this._rendermime = null;\n        this._connector = connector;\n    }\n    get disposed() {\n        return this._disposed;\n    }\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    get inspected() {\n        return this._inspected;\n    }\n    get rendermime() {\n        return this._rendermime;\n    }\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        this._disposed.emit();\n        Signal.clearData(this);\n    }\n    performDelete(varName) {\n        //noop\n    }\n}\n/**\n * An object that handles code inspection.\n */\nexport class VariableInspectionHandler extends AbstractHandler {\n    constructor(options) {\n        var _a;\n        super(options.connector);\n        /*\n         * Handle query response. Emit new signal containing the IVariableInspector.IInspectorUpdate object.\n         * (TODO: query resp. could be forwarded to panel directly)\n         */\n        this._handleQueryResponse = (response) => {\n            const msgType = response.header.msg_type;\n            switch (msgType) {\n                case 'execute_result': {\n                    const payload = response.content;\n                    let content = payload.data['text/plain'];\n                    if (content.slice(0, 1) === \"'\" || content.slice(0, 1) === '\"') {\n                        content = content.slice(1, -1);\n                        content = content.replace(/\\\\\"/g, '\"').replace(/\\\\'/g, \"'\");\n                    }\n                    const update = JSON.parse(content);\n                    const title = {\n                        contextName: '',\n                        kernelName: this._connector.kernelName || ''\n                    };\n                    this._inspected.emit({ title: title, payload: update });\n                    break;\n                }\n                case 'display_data': {\n                    const payloadDisplay = response.content;\n                    let contentDisplay = payloadDisplay.data['text/plain'];\n                    if (contentDisplay.slice(0, 1) === \"'\" ||\n                        contentDisplay.slice(0, 1) === '\"') {\n                        contentDisplay = contentDisplay.slice(1, -1);\n                        contentDisplay = contentDisplay\n                            .replace(/\\\\\"/g, '\"')\n                            .replace(/\\\\'/g, \"'\");\n                    }\n                    const updateDisplay = JSON.parse(contentDisplay);\n                    const titleDisplay = {\n                        contextName: '',\n                        kernelName: this._connector.kernelName || ''\n                    };\n                    this._inspected.emit({ title: titleDisplay, payload: updateDisplay });\n                    break;\n                }\n                default:\n                    break;\n            }\n        };\n        /*\n         * Invokes a inspection if the signal emitted from specified session is an 'execute_input' msg.\n         */\n        this._queryCall = (sess, msg) => {\n            const msgType = msg.header.msg_type;\n            switch (msgType) {\n                case 'execute_input': {\n                    const code = msg.content.code;\n                    if (!(code === this._queryCommand) &&\n                        !(code === this._matrixQueryCommand) &&\n                        !code.startsWith(this._widgetQueryCommand)) {\n                        this.performInspection();\n                    }\n                    break;\n                }\n                default:\n                    break;\n            }\n        };\n        this._id = options.id;\n        this._rendermime = (_a = options.rendermime) !== null && _a !== void 0 ? _a : null;\n        this._queryCommand = options.queryCommand;\n        this._matrixQueryCommand = options.matrixQueryCommand;\n        this._widgetQueryCommand = options.widgetQueryCommand;\n        this._deleteCommand = options.deleteCommand;\n        this._initScript = options.initScript;\n        this._ready = this._connector.ready.then(() => {\n            this._initOnKernel().then((msg) => {\n                this._connector.iopubMessage.connect(this._queryCall);\n                return;\n            });\n        });\n        this._connector.kernelRestarted.connect((sender, kernelReady) => {\n            const title = {\n                contextName: '<b>Restarting kernel...</b> '\n            };\n            this._inspected.emit({\n                title: title,\n                payload: []\n            });\n            this._ready = kernelReady.then(() => {\n                this._initOnKernel().then((msg) => {\n                    this._connector.iopubMessage.connect(this._queryCall);\n                    this.performInspection();\n                });\n            });\n        });\n    }\n    get id() {\n        return this._id;\n    }\n    get ready() {\n        return this._ready;\n    }\n    /**\n     * Performs an inspection by sending an execute request with the query command to the kernel.\n     */\n    performInspection() {\n        const content = {\n            code: this._queryCommand,\n            stop_on_error: false,\n            store_history: false\n        };\n        this._connector.fetch(content, this._handleQueryResponse);\n    }\n    /**\n     * Performs an inspection of a Jupyter Widget\n     */\n    performWidgetInspection(varName) {\n        const request = {\n            code: this._widgetQueryCommand + '(' + varName + ')',\n            stop_on_error: false,\n            store_history: false\n        };\n        return this._connector.execute(request);\n    }\n    /**\n     * Performs an inspection of the specified matrix.\n     */\n    performMatrixInspection(varName, maxRows = 100000) {\n        const request = {\n            code: this._matrixQueryCommand + '(' + varName + ', ' + maxRows + ')',\n            stop_on_error: false,\n            store_history: false\n        };\n        const con = this._connector;\n        return new Promise((resolve, reject) => {\n            con.fetch(request, (response) => {\n                const msgType = response.header.msg_type;\n                switch (msgType) {\n                    case 'execute_result': {\n                        const payload = response.content;\n                        let content = payload.data['text/plain'];\n                        content = content.replace(/^'|'$/g, '');\n                        content = content.replace(/\\\\\"/g, '\"');\n                        content = content.replace(/\\\\'/g, \"\\\\\\\\'\");\n                        const modelOptions = JSON.parse(content);\n                        const jsonModel = new JSONModel(modelOptions);\n                        resolve(jsonModel);\n                        break;\n                    }\n                    case 'error':\n                        console.log(response);\n                        reject(\"Kernel error on 'matrixQuery' call!\");\n                        break;\n                    default:\n                        break;\n                }\n            });\n        });\n    }\n    /**\n     * Send a kernel request to delete a variable from the global environment\n     */\n    performDelete(varName) {\n        const content = {\n            code: this._deleteCommand + \"('\" + varName + \"')\",\n            stop_on_error: false,\n            store_history: false\n        };\n        this._connector.fetch(content, this._handleQueryResponse);\n    }\n    /**\n     * Initializes the kernel by running the set up script located at _initScriptPath.\n     */\n    _initOnKernel() {\n        const content = {\n            code: this._initScript,\n            stop_on_error: false,\n            silent: true\n        };\n        return this._connector.fetch(content, () => {\n            //no op\n        });\n    }\n}\nexport class DummyHandler extends AbstractHandler {\n    constructor(connector) {\n        super(connector);\n    }\n    performInspection() {\n        const title = {\n            contextName: '. <b>Language currently not supported.</b> ',\n            kernelName: this._connector.kernelName || ''\n        };\n        this._inspected.emit({\n            title: title,\n            payload: []\n        });\n    }\n    performMatrixInspection(varName, maxRows) {\n        return new Promise((resolve, reject) => {\n            reject('Cannot inspect matrices w/ the DummyHandler!');\n        });\n    }\n    performWidgetInspection(varName) {\n        const request = {\n            code: '',\n            stop_on_error: false,\n            store_history: false\n        };\n        return this._connector.execute(request);\n    }\n}\n//# sourceMappingURL=handler.js.map","class Languages {\n    static getScript(lang) {\n        return new Promise((resolve, reject) => {\n            if (lang in Languages.scripts) {\n                resolve(Languages.scripts[lang]);\n            }\n            else {\n                reject('Language ' + lang + ' not supported yet!');\n            }\n        });\n    }\n}\n/**\n * Init and query script for supported languages.\n */\nLanguages.py_script = `import json\nimport sys\nfrom importlib import __import__\nfrom IPython import get_ipython\nfrom IPython.core.magics.namespace import NamespaceMagics\n\n\n_jupyterlab_variableinspector_nms = NamespaceMagics()\n_jupyterlab_variableinspector_Jupyter = get_ipython()\n_jupyterlab_variableinspector_nms.shell = _jupyterlab_variableinspector_Jupyter.kernel.shell\n\n__np = None\n__pd = None\n__pyspark = None\n__tf = None\n__K = None\n__torch = None\n__ipywidgets = None\n__xr = None\n\n\ndef _attempt_import(module):\n    try:\n        return __import__(module)\n    except ImportError:\n        return None\n\n\ndef _check_imported():\n    global __np, __pd, __pyspark, __tf, __K, __torch, __ipywidgets, __xr\n\n    __np = _attempt_import('numpy')\n    __pd = _attempt_import('pandas')\n    __pyspark = _attempt_import('pyspark')\n    __tf = _attempt_import('tensorflow')\n    __K = _attempt_import('keras.backend') or _attempt_import('tensorflow.keras.backend')\n    __torch = _attempt_import('torch')\n    __ipywidgets = _attempt_import('ipywidgets')\n    __xr = _attempt_import('xarray')\n\n\ndef _jupyterlab_variableinspector_getsizeof(x):\n    if type(x).__name__ in ['ndarray', 'Series']:\n        return x.nbytes\n    elif __pyspark and isinstance(x, __pyspark.sql.DataFrame):\n        return \"?\"\n    elif __tf and isinstance(x, __tf.Variable):\n        return \"?\"\n    elif __torch and isinstance(x, __torch.Tensor):\n        return x.element_size() * x.nelement()\n    elif __pd and type(x).__name__ == 'DataFrame':\n        return x.memory_usage().sum()\n    else:\n        return sys.getsizeof(x)\n\n\ndef _jupyterlab_variableinspector_getshapeof(x):\n    if __pd and isinstance(x, __pd.DataFrame):\n        return \"%d rows x %d cols\" % x.shape\n    if __pd and isinstance(x, __pd.Series):\n        return \"%d rows\" % x.shape\n    if __np and isinstance(x, __np.ndarray):\n        shape = \" x \".join([str(i) for i in x.shape])\n        return \"%s\" % shape\n    if __pyspark and isinstance(x, __pyspark.sql.DataFrame):\n        return \"? rows x %d cols\" % len(x.columns)\n    if __tf and isinstance(x, __tf.Variable):\n        shape = \" x \".join([str(int(i)) for i in x.shape])\n        return \"%s\" % shape\n    if __tf and isinstance(x, __tf.Tensor):\n        shape = \" x \".join([str(int(i)) for i in x.shape])\n        return \"%s\" % shape\n    if __torch and isinstance(x, __torch.Tensor):\n        shape = \" x \".join([str(int(i)) for i in x.shape])\n        return \"%s\" % shape\n    if __xr and isinstance(x, __xr.DataArray):\n        shape = \" x \".join([str(int(i)) for i in x.shape])\n        return \"%s\" % shape\n    if isinstance(x, list):\n        return \"%s\" % len(x)\n    if isinstance(x, dict):\n        return \"%s keys\" % len(x)\n    return None\n\n\ndef _jupyterlab_variableinspector_getcontentof(x):\n    # returns content in a friendly way for python variables\n    # pandas and numpy\n    if __pd and isinstance(x, __pd.DataFrame):\n        colnames = ', '.join(x.columns.map(str))\n        content = \"Columns: %s\" % colnames\n    elif __pd and isinstance(x, __pd.Series):\n        content = str(x.values).replace(\" \", \", \")[1:-1]\n        content = content.replace(\"\\\\n\", \"\")\n    elif __np and isinstance(x, __np.ndarray):\n        content = x.__repr__()\n    elif __xr and isinstance(x, __xr.DataArray):\n        content = x.values.__repr__()\n    else:\n        content = str(x)\n\n    if len(content) > 150:\n        return content[:150] + \" ...\"\n    else:\n        return content\n\n\ndef _jupyterlab_variableinspector_is_matrix(x):\n    # True if type(x).__name__ in [\"DataFrame\", \"ndarray\", \"Series\"] else False\n    if __pd and isinstance(x, __pd.DataFrame):\n        return True\n    if __pd and isinstance(x, __pd.Series):\n        return True\n    if __np and isinstance(x, __np.ndarray) and len(x.shape) <= 2:\n        return True\n    if __pyspark and isinstance(x, __pyspark.sql.DataFrame):\n        return True\n    if __tf and isinstance(x, __tf.Variable) and len(x.shape) <= 2:\n        return True\n    if __tf and isinstance(x, __tf.Tensor) and len(x.shape) <= 2:\n        return True\n    if __torch and isinstance(x, __torch.Tensor) and len(x.shape) <= 2:\n        return True\n    if __xr and isinstance(x, __xr.DataArray) and len(x.shape) <= 2:\n        return True\n    if isinstance(x, list):\n        return True\n    return False\n\n\ndef _jupyterlab_variableinspector_is_widget(x):\n    return __ipywidgets and issubclass(x, __ipywidgets.DOMWidget)\n\n\ndef _jupyterlab_variableinspector_dict_list():\n    _check_imported()\n    def keep_cond(v):\n        try:\n            obj = eval(v)\n            if isinstance(obj, str):\n                return True\n            if __tf and isinstance(obj, __tf.Variable):\n                return True\n            if __pd and __pd is not None and (\n                isinstance(obj, __pd.core.frame.DataFrame)\n                or isinstance(obj, __pd.core.series.Series)):\n                return True\n            if __xr and __xr is not None and isinstance(obj, __xr.DataArray):\n                return True\n            if str(obj)[0] == \"<\":\n                return False\n            if  v in ['__np', '__pd', '__pyspark', '__tf', '__K', '__torch', '__ipywidgets', '__xr']:\n                return obj is not None\n            if str(obj).startswith(\"_Feature\"):\n                # removes tf/keras objects\n                return False\n            return True\n        except:\n            return False\n    values = _jupyterlab_variableinspector_nms.who_ls()\n    vardic = [\n        {\n            'varName': _v,\n            'varType': type(eval(_v)).__name__, \n            'varSize': str(_jupyterlab_variableinspector_getsizeof(eval(_v))), \n            'varShape': str(_jupyterlab_variableinspector_getshapeof(eval(_v))) if _jupyterlab_variableinspector_getshapeof(eval(_v)) else '', \n            'varContent': str(_jupyterlab_variableinspector_getcontentof(eval(_v))), \n            'isMatrix': _jupyterlab_variableinspector_is_matrix(eval(_v)),\n            'isWidget': _jupyterlab_variableinspector_is_widget(type(eval(_v)))\n        }\n        for _v in values if keep_cond(_v)\n    ]\n    return json.dumps(vardic, ensure_ascii=False)\n\n\ndef _jupyterlab_variableinspector_getmatrixcontent(x, max_rows=10000):\n    # to do: add something to handle this in the future\n    threshold = max_rows\n\n    if __pd and __pyspark and isinstance(x, __pyspark.sql.DataFrame):\n        df = x.limit(threshold).toPandas()\n        return _jupyterlab_variableinspector_getmatrixcontent(df.copy())\n    elif __np and __pd and type(x).__name__ == \"DataFrame\":\n        if threshold is not None:\n            x = x.head(threshold)\n        x.columns = x.columns.map(str)\n        return x.to_json(orient=\"table\", default_handler=_jupyterlab_variableinspector_default, force_ascii=False)\n    elif __np and __pd and type(x).__name__ == \"Series\":\n        if threshold is not None:\n            x = x.head(threshold)\n        return x.to_json(orient=\"table\", default_handler=_jupyterlab_variableinspector_default, force_ascii=False)\n    elif __np and __pd and type(x).__name__ == \"ndarray\":\n        df = __pd.DataFrame(x)\n        return _jupyterlab_variableinspector_getmatrixcontent(df)\n    elif __tf and (isinstance(x, __tf.Variable) or isinstance(x, __tf.Tensor)):\n        df = __K.get_value(x)\n        return _jupyterlab_variableinspector_getmatrixcontent(df)\n    elif __torch and isinstance(x, __torch.Tensor):\n        df = x.cpu().numpy()\n        return _jupyterlab_variableinspector_getmatrixcontent(df)\n    elif __xr and isinstance(x, __xr.DataArray):\n        df = x.to_numpy()\n        return _jupyterlab_variableinspector_getmatrixcontent(df)\n    elif isinstance(x, list):\n        s = __pd.Series(x)\n        return _jupyterlab_variableinspector_getmatrixcontent(s)\n\n\ndef _jupyterlab_variableinspector_displaywidget(widget):\n    display(widget)\n\n\ndef _jupyterlab_variableinspector_default(o):\n    if isinstance(o, __np.number): return int(o)  \n    raise TypeError\n\n\ndef _jupyterlab_variableinspector_deletevariable(x):\n    exec(\"del %s\" % x, globals())\n`;\nLanguages.r_script = `library(repr)\n\n.ls.objects = function (pos = 1, pattern, order.by, decreasing = FALSE, head = FALSE, \n    n = 5) \n{\n    napply <- function(names, fn) sapply(names, function(x) fn(get(x, \n        pos = pos)))\n    names <- ls(pos = pos, pattern = pattern)\n    if (length(names) == 0) {\n        return(jsonlite::toJSON(data.frame()))\n    }\n    obj.class <- napply(names, function(x) as.character(class(x))[1])\n    obj.mode <- napply(names, mode)\n    obj.type <- ifelse(is.na(obj.class), obj.mode, obj.class)\n    obj.size <- napply(names, object.size)\n    obj.dim <- t(napply(names, function(x) as.numeric(dim(x))[1:2]))\n    obj.content <- rep(\"NA\", length(names))\n    has_no_dim <- is.na(obj.dim)[1:length(names)]                        \n    obj.dim[has_no_dim, 1] <- napply(names, length)[has_no_dim]\n    vec <- (obj.type != \"function\")\n    obj.content[vec] <- napply(names[vec], function(x) toString(x, width = 154)[1])\n                      \n    obj.rownames <- napply(names, rownames)\n    has_rownames <- obj.rownames != \"NULL\"\n    obj.rownames <- sapply(obj.rownames[has_rownames], function(x) paste(x,\n        collapse=\", \"))\n    obj.rownames.short <- sapply(obj.rownames, function(x) paste(substr(x, 1, 150), \"....\"))\n    obj.rownames <- ifelse(nchar(obj.rownames) > 154, obj.rownames.short, obj.rownames)\n    obj.rownames <- sapply(obj.rownames, function(x) paste(\"Row names: \",x))\n    obj.content[has_rownames] <- obj.rownames\n                               \n                               \n    obj.colnames <- napply(names, colnames)\n    has_colnames <- obj.colnames != \"NULL\"\n    obj.colnames <- sapply(obj.colnames[has_colnames], function(x) paste(x, \n        collapse = \", \"))\n    obj.colnames.short <- sapply(obj.colnames, function(x) paste(substr(x, \n        1, 150), \"....\"))\n    obj.colnames <- ifelse(nchar(obj.colnames) > 154, obj.colnames.short, \n        obj.colnames)\n    obj.colnames <- sapply(obj.colnames, function(x) paste(\"Column names: \",x))\n                    \n    obj.content[has_colnames] <- obj.colnames\n                           \n    is_function <- (obj.type == \"function\")\n    obj.content[is_function] <- napply(names[is_function], function(x) paste(strsplit(repr_text(x),\")\")[[1]][1],\")\",sep=\"\"))\n    obj.content <- unlist(obj.content, use.names = FALSE)\n    \n\n    out <- data.frame(obj.type, obj.size, obj.dim)\n    names(out) <- c(\"varType\", \"varSize\", \"Rows\", \"Columns\")\n    out$varShape <- paste(out$Rows, \" x \", out$Columns)\n    out$varContent <- obj.content\n    out$isMatrix <- FALSE\n    out$varName <- row.names(out)\n    out <- out[, !(names(out) %in% c(\"Rows\", \"Columns\"))]\n    rownames(out) <- NULL\n    print(out)\n    if (!missing(order.by)) \n        out <- out[order(out[[order.by]], decreasing = decreasing), \n            ]\n    if (head) \n        out <- head(out, n)\n    jsonlite::toJSON(out)\n}\n\n.deleteVariable <- function(x) {\n    remove(list=c(x), envir=.GlobalEnv)\n}\n    `;\nLanguages.scripts = {\n    python3: {\n        initScript: Languages.py_script,\n        queryCommand: '_jupyterlab_variableinspector_dict_list()',\n        matrixQueryCommand: '_jupyterlab_variableinspector_getmatrixcontent',\n        widgetQueryCommand: '_jupyterlab_variableinspector_displaywidget',\n        deleteCommand: '_jupyterlab_variableinspector_deletevariable'\n    },\n    python2: {\n        initScript: Languages.py_script,\n        queryCommand: '_jupyterlab_variableinspector_dict_list()',\n        matrixQueryCommand: '_jupyterlab_variableinspector_getmatrixcontent',\n        widgetQueryCommand: '_jupyterlab_variableinspector_displaywidget',\n        deleteCommand: '_jupyterlab_variableinspector_deletevariable'\n    },\n    python: {\n        initScript: Languages.py_script,\n        queryCommand: '_jupyterlab_variableinspector_dict_list()',\n        matrixQueryCommand: '_jupyterlab_variableinspector_getmatrixcontent',\n        widgetQueryCommand: '_jupyterlab_variableinspector_displaywidget',\n        deleteCommand: '_jupyterlab_variableinspector_deletevariable'\n    },\n    R: {\n        initScript: Languages.r_script,\n        queryCommand: '.ls.objects()',\n        matrixQueryCommand: '.ls.objects',\n        widgetQueryCommand: 'TODO',\n        deleteCommand: '.deleteVariable'\n    },\n    scala: {\n        initScript: '_root_.almond.api.JupyterAPIHolder.value.VariableInspector.init()',\n        queryCommand: '_root_.almond.api.JupyterAPIHolder.value.VariableInspector.dictList()',\n        matrixQueryCommand: '',\n        widgetQueryCommand: '',\n        deleteCommand: '' // TODO\n    }\n};\nexport { Languages };\n//# sourceMappingURL=inspectorscripts.js.map","import { Signal } from '@lumino/signaling';\n/**\n * Connector class that handles execute request to a kernel\n */\nexport class KernelConnector {\n    constructor(options) {\n        this._kernelRestarted = new Signal(this);\n        this._session = options.session;\n        this._session.statusChanged.connect((sender, newStatus) => {\n            switch (newStatus) {\n                case 'restarting':\n                case 'autorestarting':\n                    this._kernelRestarted.emit(this._session.ready);\n                    break;\n                default:\n                    break;\n            }\n        });\n    }\n    get kernelRestarted() {\n        return this._kernelRestarted;\n    }\n    get kernelLanguage() {\n        var _a;\n        if (!((_a = this._session.session) === null || _a === void 0 ? void 0 : _a.kernel)) {\n            return Promise.resolve('');\n        }\n        return this._session.session.kernel.info.then(infoReply => {\n            return infoReply.language_info.name;\n        });\n    }\n    get kernelName() {\n        return this._session.kernelDisplayName;\n    }\n    /**\n     *  A Promise that is fulfilled when the session associated w/ the connector is ready.\n     */\n    get ready() {\n        return this._session.ready;\n    }\n    /**\n     *  A signal emitted for iopub messages of the kernel associated with the kernel.\n     */\n    get iopubMessage() {\n        return this._session.iopubMessage;\n    }\n    /**\n     * Executes the given request on the kernel associated with the connector.\n     * @param content: IExecuteRequestMsg to forward to the kernel.\n     * @param ioCallback: Callable to forward IOPub messages of the kernel to.\n     * @returns Promise<KernelMessage.IExecuteReplyMsg>\n     */\n    fetch(content, ioCallback) {\n        var _a;\n        const kernel = (_a = this._session.session) === null || _a === void 0 ? void 0 : _a.kernel;\n        if (!kernel) {\n            return Promise.reject(new Error('Require kernel to perform variable inspection!'));\n        }\n        const future = kernel.requestExecute(content);\n        future.onIOPub = (msg) => {\n            ioCallback(msg);\n        };\n        return future.done;\n    }\n    execute(content) {\n        var _a;\n        if (!((_a = this._session.session) === null || _a === void 0 ? void 0 : _a.kernel)) {\n            throw new Error('No session available.');\n        }\n        return this._session.session.kernel.requestExecute(content);\n    }\n}\n//# sourceMappingURL=kernelconnector.js.map","/**\n * A class that manages variable inspector widget instances and offers persistent\n * `IVariableInspector` instance that other plugins can communicate with.\n */\nexport class VariableInspectorManager {\n    constructor() {\n        this._source = null;\n        this._panel = null;\n        this._handlers = {};\n    }\n    hasHandler(id) {\n        if (this._handlers[id]) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    getHandler(id) {\n        return this._handlers[id];\n    }\n    addHandler(handler) {\n        this._handlers[handler.id] = handler;\n    }\n    /**\n     * The current inspector panel.\n     */\n    get panel() {\n        return this._panel;\n    }\n    set panel(panel) {\n        if (this.panel === panel) {\n            return;\n        }\n        this._panel = panel;\n        if (panel && !panel.source) {\n            panel.source = this._source;\n        }\n    }\n    /**\n     * The source of events the inspector panel listens for.\n     */\n    get source() {\n        return this._source;\n    }\n    set source(source) {\n        if (this._source === source) {\n            return;\n        }\n        // remove subscriptions\n        if (this._source) {\n            this._source.disposed.disconnect(this._onSourceDisposed, this);\n        }\n        this._source = source;\n        if (this._panel && !this._panel.isDisposed) {\n            this._panel.source = this._source;\n        }\n        // Subscribe to new source\n        if (this._source) {\n            this._source.disposed.connect(this._onSourceDisposed, this);\n        }\n    }\n    _onSourceDisposed() {\n        this._source = null;\n    }\n}\n//# sourceMappingURL=manager.js.map","import { OutputAreaModel, SimplifiedOutputArea } from '@jupyterlab/outputarea';\nimport { closeIcon, searchIcon } from '@jupyterlab/ui-components';\nimport { DataGrid } from '@lumino/datagrid';\nimport { Widget } from '@lumino/widgets';\nconst TITLE_CLASS = 'jp-VarInspector-title';\nconst PANEL_CLASS = 'jp-VarInspector';\nconst TABLE_CLASS = 'jp-VarInspector-table';\nconst TABLE_BODY_CLASS = 'jp-VarInspector-content';\n/**\n * A panel that renders the variables\n */\nexport class VariableInspectorPanel extends Widget {\n    constructor() {\n        super();\n        this._source = null;\n        this.addClass(PANEL_CLASS);\n        this._title = Private.createTitle();\n        this._title.className = TITLE_CLASS;\n        this._table = Private.createTable();\n        this._table.className = TABLE_CLASS;\n        this.node.appendChild(this._title);\n        this.node.appendChild(this._table);\n    }\n    get source() {\n        return this._source;\n    }\n    set source(source) {\n        if (this._source === source) {\n            // this._source.performInspection();\n            return;\n        }\n        //Remove old subscriptions\n        if (this._source) {\n            this._source.inspected.disconnect(this.onInspectorUpdate, this);\n            this._source.disposed.disconnect(this.onSourceDisposed, this);\n        }\n        this._source = source;\n        //Subscribe to new object\n        if (this._source) {\n            this._source.inspected.connect(this.onInspectorUpdate, this);\n            this._source.disposed.connect(this.onSourceDisposed, this);\n            this._source.performInspection();\n        }\n    }\n    /**\n     * Dispose resources\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this.source = null;\n        super.dispose();\n    }\n    onInspectorUpdate(sender, allArgs) {\n        var _a;\n        if (!this.isAttached) {\n            return;\n        }\n        const title = allArgs.title;\n        const args = allArgs.payload;\n        if (title.contextName) {\n            this._title.innerHTML = title.contextName;\n        }\n        else {\n            this._title.innerHTML =\n                \"    Inspecting '\" + title.kernelName + \"' \" + title.contextName;\n        }\n        //Render new variable state\n        let row;\n        this._table.deleteTFoot();\n        this._table.createTFoot();\n        this._table.tFoot.className = TABLE_BODY_CLASS;\n        for (let index = 0; index < args.length; index++) {\n            const item = args[index];\n            const name = item.varName;\n            const varType = item.varType;\n            row = this._table.tFoot.insertRow();\n            // Add delete icon and onclick event\n            let cell = row.insertCell(0);\n            cell.title = 'Delete Variable';\n            cell.className = 'jp-VarInspector-deleteButton';\n            const ico = closeIcon.element();\n            ico.onclick = (ev) => {\n                var _a;\n                (_a = this.source) === null || _a === void 0 ? void 0 : _a.performDelete(name);\n            };\n            cell.append(ico);\n            // Add onclick event for inspection\n            cell = row.insertCell(1);\n            if (item.isMatrix) {\n                cell.title = 'View Contents';\n                cell.className = 'jp-VarInspector-inspectButton';\n                const ico = searchIcon.element();\n                ico.onclick = (ev) => {\n                    var _a;\n                    console.log('Click on ' + name);\n                    (_a = this._source) === null || _a === void 0 ? void 0 : _a.performMatrixInspection(name).then((model) => {\n                        this._showMatrix(model, name, varType);\n                    });\n                };\n                cell.append(ico);\n            }\n            else {\n                cell.innerHTML = '';\n            }\n            cell = row.insertCell(2);\n            cell.className = 'jp-VarInspector-varName';\n            cell.innerHTML = name;\n            // Add remaining cells\n            cell = row.insertCell(3);\n            cell.innerHTML = varType;\n            cell = row.insertCell(4);\n            cell.innerHTML = item.varSize;\n            cell = row.insertCell(5);\n            cell.innerHTML = item.varShape;\n            cell = row.insertCell(6);\n            const rendermime = (_a = this._source) === null || _a === void 0 ? void 0 : _a.rendermime;\n            if (item.isWidget && rendermime) {\n                const model = new OutputAreaModel({ trusted: true });\n                const output = new SimplifiedOutputArea({ model, rendermime });\n                output.future = this._source.performWidgetInspection(item.varName);\n                Widget.attach(output, cell);\n            }\n            else {\n                cell.innerHTML = Private.escapeHtml(item.varContent).replace(/\\\\n/g, '</br>');\n            }\n        }\n    }\n    /**\n     * Handle source disposed signals.\n     */\n    onSourceDisposed(sender, args) {\n        this.source = null;\n    }\n    _showMatrix(dataModel, name, varType) {\n        const datagrid = new DataGrid({\n            defaultSizes: {\n                rowHeight: 32,\n                columnWidth: 128,\n                rowHeaderWidth: 64,\n                columnHeaderHeight: 32\n            }\n        });\n        datagrid.dataModel = dataModel;\n        datagrid.title.label = varType + ': ' + name;\n        datagrid.title.closable = true;\n        const lout = this.parent.layout;\n        lout.addWidget(datagrid, { mode: 'split-right' });\n        //todo activate/focus matrix widget\n    }\n}\nvar Private;\n(function (Private) {\n    const entityMap = new Map(Object.entries({\n        '&': '&amp;',\n        '<': '&lt;',\n        '>': '&gt;',\n        '\"': '&quot;',\n        \"'\": '&#39;',\n        '/': '&#x2F;'\n    }));\n    function escapeHtml(source) {\n        return String(source).replace(/[&<>\"'/]/g, (s) => entityMap.get(s));\n    }\n    Private.escapeHtml = escapeHtml;\n    function createTable() {\n        const table = document.createElement('table');\n        table.createTHead();\n        const hrow = table.tHead.insertRow(0);\n        const cell1 = hrow.insertCell(0);\n        cell1.innerHTML = '';\n        const cell2 = hrow.insertCell(1);\n        cell2.innerHTML = '';\n        const cell3 = hrow.insertCell(2);\n        cell3.innerHTML = 'Name';\n        const cell4 = hrow.insertCell(3);\n        cell4.innerHTML = 'Type';\n        const cell5 = hrow.insertCell(4);\n        cell5.innerHTML = 'Size';\n        const cell6 = hrow.insertCell(5);\n        cell6.innerHTML = 'Shape';\n        const cell7 = hrow.insertCell(6);\n        cell7.innerHTML = 'Content';\n        return table;\n    }\n    Private.createTable = createTable;\n    function createTitle(header = '') {\n        const title = document.createElement('p');\n        title.innerHTML = header;\n        return title;\n    }\n    Private.createTitle = createTitle;\n})(Private || (Private = {}));\n//# sourceMappingURL=variableinspector.js.map","import { Token } from '@lumino/coreutils';\nexport const IVariableInspectorManager = new Token('jupyterlab_extension/variableinspector:IVariableInspectorManager');\n/**\n * The inspector panel token.\n */\nexport const IVariableInspector = new Token('jupyterlab_extension/variableinspector:IVariableInspector');\n//# sourceMappingURL=tokens.js.map","import { ICommandPalette, WidgetTracker } from '@jupyterlab/apputils';\nimport { ILabShell, ILayoutRestorer } from '@jupyterlab/application';\nimport { IConsoleTracker } from '@jupyterlab/console';\nimport { INotebookTracker } from '@jupyterlab/notebook';\nimport { listIcon } from '@jupyterlab/ui-components';\nimport { DummyHandler, VariableInspectionHandler } from './handler';\nimport { Languages } from './inspectorscripts';\nimport { KernelConnector } from './kernelconnector';\nimport { VariableInspectorManager } from './manager';\nimport { VariableInspectorPanel } from './variableinspector';\nimport { IVariableInspectorManager } from './tokens';\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.open = 'variableinspector:open';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * A service providing variable introspection.\n */\nconst variableinspector = {\n    id: '@lckr/jupyterlab_variableinspector',\n    requires: [ICommandPalette, ILayoutRestorer, ILabShell],\n    provides: IVariableInspectorManager,\n    autoStart: true,\n    activate: (app, palette, restorer, labShell) => {\n        const manager = new VariableInspectorManager();\n        const category = 'Variable Inspector';\n        const command = CommandIDs.open;\n        const label = 'Open Variable Inspector';\n        const namespace = 'variableinspector';\n        const tracker = new WidgetTracker({ namespace });\n        /**\n         * Create and track a new inspector.\n         */\n        function newPanel() {\n            const panel = new VariableInspectorPanel();\n            panel.id = 'jp-variableinspector';\n            panel.title.label = 'Variable Inspector';\n            panel.title.icon = listIcon;\n            panel.title.closable = true;\n            panel.disposed.connect(() => {\n                if (manager.panel === panel) {\n                    manager.panel = null;\n                }\n            });\n            //Track the inspector panel\n            tracker.add(panel);\n            return panel;\n        }\n        // Enable state restoration\n        restorer.restore(tracker, {\n            command,\n            args: () => ({}),\n            name: () => 'variableinspector'\n        });\n        // Add command to palette\n        app.commands.addCommand(command, {\n            label,\n            execute: () => {\n                if (!manager.panel || manager.panel.isDisposed) {\n                    manager.panel = newPanel();\n                }\n                if (!manager.panel.isAttached) {\n                    labShell.add(manager.panel, 'main');\n                }\n                if (manager.source) {\n                    manager.source.performInspection();\n                }\n                labShell.activateById(manager.panel.id);\n            }\n        });\n        palette.addItem({ command, category });\n        console.log('JupyterLab extension @lckr/jupyterlab_variableinspector is activated!');\n        return manager;\n    }\n};\n/**\n * An extension that registers consoles for variable inspection.\n */\nconst consoles = {\n    id: '@lckr/jupyterlab-variableinspector:consoles',\n    requires: [IVariableInspectorManager, IConsoleTracker, ILabShell],\n    autoStart: true,\n    activate: (app, manager, consoles, labShell) => {\n        const handlers = {};\n        /**\n         * Subscribes to the creation of new consoles. If a new notebook is created, build a new handler for the consoles.\n         * Adds a promise for a instanced handler to the 'handlers' collection.\n         */\n        consoles.widgetAdded.connect((sender, consolePanel) => {\n            if (manager.hasHandler(consolePanel.sessionContext.path)) {\n                handlers[consolePanel.id] = new Promise((resolve, reject) => {\n                    resolve(manager.getHandler(consolePanel.sessionContext.path));\n                });\n            }\n            else {\n                handlers[consolePanel.id] = new Promise((resolve, reject) => {\n                    const session = consolePanel.sessionContext;\n                    // Create connector and init w script if it exists for kernel type.\n                    const connector = new KernelConnector({ session });\n                    const scripts = connector.ready.then(() => {\n                        return connector.kernelLanguage.then(lang => {\n                            return Languages.getScript(lang);\n                        });\n                    });\n                    scripts.then((result) => {\n                        const initScript = result.initScript;\n                        const queryCommand = result.queryCommand;\n                        const matrixQueryCommand = result.matrixQueryCommand;\n                        const widgetQueryCommand = result.widgetQueryCommand;\n                        const deleteCommand = result.deleteCommand;\n                        const options = {\n                            queryCommand: queryCommand,\n                            matrixQueryCommand: matrixQueryCommand,\n                            widgetQueryCommand,\n                            deleteCommand: deleteCommand,\n                            connector: connector,\n                            initScript: initScript,\n                            id: session.path //Using the sessions path as an identifier for now.\n                        };\n                        const handler = new VariableInspectionHandler(options);\n                        manager.addHandler(handler);\n                        consolePanel.disposed.connect(() => {\n                            delete handlers[consolePanel.id];\n                            handler.dispose();\n                        });\n                        handler.ready.then(() => {\n                            resolve(handler);\n                        });\n                    });\n                    //Otherwise log error message.\n                    scripts.catch((result) => {\n                        console.log(result);\n                        const handler = new DummyHandler(connector);\n                        consolePanel.disposed.connect(() => {\n                            delete handlers[consolePanel.id];\n                            handler.dispose();\n                        });\n                        resolve(handler);\n                    });\n                });\n            }\n            setSource(labShell);\n        });\n        const setSource = (sender, args) => {\n            var _a;\n            const widget = (_a = args === null || args === void 0 ? void 0 : args.newValue) !== null && _a !== void 0 ? _a : sender.currentWidget;\n            if (!widget || !consoles.has(widget)) {\n                return;\n            }\n            const future = handlers[widget.id];\n            future.then((source) => {\n                if (source) {\n                    manager.source = source;\n                    manager.source.performInspection();\n                }\n            });\n        };\n        /**\n         * If focus window changes, checks whether new focus widget is a console.\n         * In that case, retrieves the handler associated to the console after it has been\n         * initialized and updates the manager with it.\n         */\n        setSource(labShell);\n        labShell.currentChanged.connect(setSource);\n        app.contextMenu.addItem({\n            command: CommandIDs.open,\n            selector: '.jp-CodeConsole'\n        });\n    }\n};\n/**\n * An extension that registers notebooks for variable inspection.\n */\nconst notebooks = {\n    id: '@lckr/jupyterlab-variableinspector:notebooks',\n    requires: [IVariableInspectorManager, INotebookTracker, ILabShell],\n    autoStart: true,\n    activate: (app, manager, notebooks, labShell) => {\n        const handlers = {};\n        /**\n         * Subscribes to the creation of new notebooks. If a new notebook is created, build a new handler for the notebook.\n         * Adds a promise for a instanced handler to the 'handlers' collection.\n         */\n        notebooks.widgetAdded.connect((sender, nbPanel) => {\n            //A promise that resolves after the initialization of the handler is done.\n            handlers[nbPanel.id] = new Promise((resolve, reject) => {\n                const session = nbPanel.sessionContext;\n                const connector = new KernelConnector({ session });\n                const rendermime = nbPanel.content.rendermime;\n                const scripts = connector.ready.then(async () => {\n                    const lang = await connector.kernelLanguage;\n                    return Languages.getScript(lang);\n                });\n                scripts.then((result) => {\n                    const initScript = result.initScript;\n                    const queryCommand = result.queryCommand;\n                    const matrixQueryCommand = result.matrixQueryCommand;\n                    const widgetQueryCommand = result.widgetQueryCommand;\n                    const deleteCommand = result.deleteCommand;\n                    const options = {\n                        queryCommand: queryCommand,\n                        matrixQueryCommand: matrixQueryCommand,\n                        widgetQueryCommand,\n                        deleteCommand: deleteCommand,\n                        connector: connector,\n                        rendermime,\n                        initScript: initScript,\n                        id: session.path //Using the sessions path as an identifier for now.\n                    };\n                    const handler = new VariableInspectionHandler(options);\n                    manager.addHandler(handler);\n                    nbPanel.disposed.connect(() => {\n                        delete handlers[nbPanel.id];\n                        handler.dispose();\n                    });\n                    handler.ready.then(() => {\n                        resolve(handler);\n                    });\n                });\n                //Otherwise log error message.\n                scripts.catch((result) => {\n                    reject(result);\n                });\n            });\n            setSource(labShell);\n        });\n        const setSource = (sender, args) => {\n            var _a;\n            const widget = (_a = args === null || args === void 0 ? void 0 : args.newValue) !== null && _a !== void 0 ? _a : sender.currentWidget;\n            if (!widget || !notebooks.has(widget) || widget.isDisposed) {\n                return;\n            }\n            const future = handlers[widget.id];\n            future === null || future === void 0 ? void 0 : future.then((source) => {\n                if (source) {\n                    manager.source = source;\n                    manager.source.performInspection();\n                }\n            });\n        };\n        /**\n         * If focus window changes, checks whether new focus widget is a notebook.\n         * In that case, retrieves the handler associated to the notebook after it has been\n         * initialized and updates the manager with it.\n         */\n        setSource(labShell);\n        labShell.currentChanged.connect(setSource);\n        app.contextMenu.addItem({\n            command: CommandIDs.open,\n            selector: '.jp-Notebook'\n        });\n    }\n};\n/**\n * Export the plugins as default.\n */\nconst plugins = [\n    variableinspector,\n    consoles,\n    notebooks\n];\nexport default plugins;\n//# sourceMappingURL=index.js.map"],"names":["AbstractHandler","constructor","connector","this","_isDisposed","_disposed","Signal","_inspected","_rendermime","_connector","disposed","isDisposed","inspected","rendermime","dispose","emit","clearData","performDelete","varName","VariableInspectionHandler","options","_a","super","_handleQueryResponse","response","msgType","header","msg_type","payload","content","data","slice","replace","update","JSON","parse","title","contextName","kernelName","payloadDisplay","contentDisplay","updateDisplay","titleDisplay","_queryCall","sess","msg","code","_queryCommand","_matrixQueryCommand","startsWith","_widgetQueryCommand","performInspection","_id","id","queryCommand","matrixQueryCommand","widgetQueryCommand","_deleteCommand","deleteCommand","_initScript","initScript","_ready","ready","then","_initOnKernel","iopubMessage","connect","kernelRestarted","sender","kernelReady","stop_on_error","store_history","fetch","performWidgetInspection","request","execute","performMatrixInspection","maxRows","con","Promise","resolve","reject","modelOptions","jsonModel","JSONModel","console","log","silent","DummyHandler","Languages","getScript","lang","scripts","py_script","r_script","python3","python2","python","R","scala","KernelConnector","_kernelRestarted","_session","session","statusChanged","newStatus","kernelLanguage","kernel","info","infoReply","language_info","name","kernelDisplayName","ioCallback","Error","future","requestExecute","onIOPub","done","VariableInspectorManager","_source","_panel","_handlers","hasHandler","getHandler","addHandler","handler","panel","source","disconnect","_onSourceDisposed","TITLE_CLASS","PANEL_CLASS","TABLE_CLASS","TABLE_BODY_CLASS","VariableInspectorPanel","Widget","addClass","_title","Private","createTitle","className","_table","createTable","node","appendChild","onInspectorUpdate","onSourceDisposed","allArgs","isAttached","args","innerHTML","row","deleteTFoot","createTFoot","tFoot","index","length","item","varType","insertRow","cell","insertCell","ico","closeIcon","element","onclick","ev","append","isMatrix","searchIcon","model","_showMatrix","varSize","varShape","isWidget","OutputAreaModel","trusted","output","SimplifiedOutputArea","attach","escapeHtml","varContent","dataModel","datagrid","DataGrid","defaultSizes","rowHeight","columnWidth","rowHeaderWidth","columnHeaderHeight","label","closable","lout","parent","layout","addWidget","mode","entityMap","Map","Object","entries","String","s","get","table","document","createElement","createTHead","hrow","tHead","cell1","cell2","cell3","cell4","cell5","cell6","cell7","IVariableInspectorManager","Token","IVariableInspector","CommandIDs","open","variableinspector","requires","ICommandPalette","ILayoutRestorer","ILabShell","provides","autoStart","activate","app","palette","restorer","labShell","manager","category","command","namespace","tracker","WidgetTracker","newPanel","icon","listIcon","add","restore","commands","addCommand","activateById","addItem","consoles","IConsoleTracker","handlers","widgetAdded","consolePanel","sessionContext","path","result","catch","setSource","widget","newValue","currentWidget","has","currentChanged","contextMenu","selector","notebooks","INotebookTracker","nbPanel","async","plugins"],"sourceRoot":""}