"use strict";(self["webpackChunk_jupyterlab_application_top"]=self["webpackChunk_jupyterlab_application_top"]||[]).push([[3147],{33147:(e,n,t)=>{t.r(n);t.d(n,{default:()=>L});var r=t(48287);var s=t(30244);var a=t(32976);var i=t(99872);var o=t(78464);var c=t(2336);var l=t(28426);class _{constructor(e){this._isDisposed=false;this._disposed=new c.Signal(this);this._inspected=new c.Signal(this);this._rendermime=null;this._connector=e}get disposed(){return this._disposed}get isDisposed(){return this._isDisposed}get inspected(){return this._inspected}get rendermime(){return this._rendermime}dispose(){if(this.isDisposed){return}this._isDisposed=true;this._disposed.emit();c.Signal.clearData(this)}performDelete(e){}}class p extends _{constructor(e){var n;super(e.connector);this._handleQueryResponse=e=>{const n=e.header.msg_type;switch(n){case"execute_result":{const n=e.content;let t=n.data["text/plain"];if(t.slice(0,1)==="'"||t.slice(0,1)==='"'){t=t.slice(1,-1);t=t.replace(/\\"/g,'"').replace(/\\'/g,"'")}const r=JSON.parse(t);const s={contextName:"",kernelName:this._connector.kernelName||""};this._inspected.emit({title:s,payload:r});break}case"display_data":{const n=e.content;let t=n.data["text/plain"];if(t.slice(0,1)==="'"||t.slice(0,1)==='"'){t=t.slice(1,-1);t=t.replace(/\\"/g,'"').replace(/\\'/g,"'")}const r=JSON.parse(t);const s={contextName:"",kernelName:this._connector.kernelName||""};this._inspected.emit({title:s,payload:r});break}default:break}};this._queryCall=(e,n)=>{const t=n.header.msg_type;switch(t){case"execute_input":{const e=n.content.code;if(!(e===this._queryCommand)&&!(e===this._matrixQueryCommand)&&!e.startsWith(this._widgetQueryCommand)){this.performInspection()}break}default:break}};this._id=e.id;this._rendermime=(n=e.rendermime)!==null&&n!==void 0?n:null;this._queryCommand=e.queryCommand;this._matrixQueryCommand=e.matrixQueryCommand;this._widgetQueryCommand=e.widgetQueryCommand;this._deleteCommand=e.deleteCommand;this._initScript=e.initScript;this._ready=this._connector.ready.then((()=>{this._initOnKernel().then((e=>{this._connector.iopubMessage.connect(this._queryCall);return}))}));this._connector.kernelRestarted.connect(((e,n)=>{const t={contextName:"<b>Restarting kernel...</b> "};this._inspected.emit({title:t,payload:[]});this._ready=n.then((()=>{this._initOnKernel().then((e=>{this._connector.iopubMessage.connect(this._queryCall);this.performInspection()}))}))}))}get id(){return this._id}get ready(){return this._ready}performInspection(){const e={code:this._queryCommand,stop_on_error:false,store_history:false};this._connector.fetch(e,this._handleQueryResponse)}performWidgetInspection(e){const n={code:this._widgetQueryCommand+"("+e+")",stop_on_error:false,store_history:false};return this._connector.execute(n)}performMatrixInspection(e,n=1e5){const t={code:this._matrixQueryCommand+"("+e+", "+n+")",stop_on_error:false,store_history:false};const r=this._connector;return new Promise(((e,n)=>{r.fetch(t,(t=>{const r=t.header.msg_type;switch(r){case"execute_result":{const n=t.content;let r=n.data["text/plain"];r=r.replace(/^'|'$/g,"");r=r.replace(/\\"/g,'"');r=r.replace(/\\'/g,"\\\\'");const s=JSON.parse(r);const a=new l.JSONModel(s);e(a);break}case"error":console.log(t);n("Kernel error on 'matrixQuery' call!");break;default:break}}))}))}performDelete(e){const n={code:this._deleteCommand+"('"+e+"')",stop_on_error:false,store_history:false};this._connector.fetch(n,this._handleQueryResponse)}_initOnKernel(){const e={code:this._initScript,stop_on_error:false,silent:true};return this._connector.fetch(e,(()=>{}))}}class d extends _{constructor(e){super(e)}performInspection(){const e={contextName:". <b>Language currently not supported.</b> ",kernelName:this._connector.kernelName||""};this._inspected.emit({title:e,payload:[]})}performMatrixInspection(e,n){return new Promise(((e,n)=>{n("Cannot inspect matrices w/ the DummyHandler!")}))}performWidgetInspection(e){const n={code:"",stop_on_error:false,store_history:false};return this._connector.execute(n)}}class u{static getScript(e){return new Promise(((n,t)=>{if(e in u.scripts){n(u.scripts[e])}else{t("Language "+e+" not supported yet!")}}))}}u.py_script=`import json\nimport sys\nfrom importlib import __import__\nfrom IPython import get_ipython\nfrom IPython.core.magics.namespace import NamespaceMagics\n\n\n_jupyterlab_variableinspector_nms = NamespaceMagics()\n_jupyterlab_variableinspector_Jupyter = get_ipython()\n_jupyterlab_variableinspector_nms.shell = _jupyterlab_variableinspector_Jupyter.kernel.shell\n\n__np = None\n__pd = None\n__pyspark = None\n__tf = None\n__K = None\n__torch = None\n__ipywidgets = None\n__xr = None\n\n\ndef _attempt_import(module):\n    try:\n        return __import__(module)\n    except ImportError:\n        return None\n\n\ndef _check_imported():\n    global __np, __pd, __pyspark, __tf, __K, __torch, __ipywidgets, __xr\n\n    __np = _attempt_import('numpy')\n    __pd = _attempt_import('pandas')\n    __pyspark = _attempt_import('pyspark')\n    __tf = _attempt_import('tensorflow')\n    __K = _attempt_import('keras.backend') or _attempt_import('tensorflow.keras.backend')\n    __torch = _attempt_import('torch')\n    __ipywidgets = _attempt_import('ipywidgets')\n    __xr = _attempt_import('xarray')\n\n\ndef _jupyterlab_variableinspector_getsizeof(x):\n    if type(x).__name__ in ['ndarray', 'Series']:\n        return x.nbytes\n    elif __pyspark and isinstance(x, __pyspark.sql.DataFrame):\n        return "?"\n    elif __tf and isinstance(x, __tf.Variable):\n        return "?"\n    elif __torch and isinstance(x, __torch.Tensor):\n        return x.element_size() * x.nelement()\n    elif __pd and type(x).__name__ == 'DataFrame':\n        return x.memory_usage().sum()\n    else:\n        return sys.getsizeof(x)\n\n\ndef _jupyterlab_variableinspector_getshapeof(x):\n    if __pd and isinstance(x, __pd.DataFrame):\n        return "%d rows x %d cols" % x.shape\n    if __pd and isinstance(x, __pd.Series):\n        return "%d rows" % x.shape\n    if __np and isinstance(x, __np.ndarray):\n        shape = " x ".join([str(i) for i in x.shape])\n        return "%s" % shape\n    if __pyspark and isinstance(x, __pyspark.sql.DataFrame):\n        return "? rows x %d cols" % len(x.columns)\n    if __tf and isinstance(x, __tf.Variable):\n        shape = " x ".join([str(int(i)) for i in x.shape])\n        return "%s" % shape\n    if __tf and isinstance(x, __tf.Tensor):\n        shape = " x ".join([str(int(i)) for i in x.shape])\n        return "%s" % shape\n    if __torch and isinstance(x, __torch.Tensor):\n        shape = " x ".join([str(int(i)) for i in x.shape])\n        return "%s" % shape\n    if __xr and isinstance(x, __xr.DataArray):\n        shape = " x ".join([str(int(i)) for i in x.shape])\n        return "%s" % shape\n    if isinstance(x, list):\n        return "%s" % len(x)\n    if isinstance(x, dict):\n        return "%s keys" % len(x)\n    return None\n\n\ndef _jupyterlab_variableinspector_getcontentof(x):\n    # returns content in a friendly way for python variables\n    # pandas and numpy\n    if __pd and isinstance(x, __pd.DataFrame):\n        colnames = ', '.join(x.columns.map(str))\n        content = "Columns: %s" % colnames\n    elif __pd and isinstance(x, __pd.Series):\n        content = str(x.values).replace(" ", ", ")[1:-1]\n        content = content.replace("\\n", "")\n    elif __np and isinstance(x, __np.ndarray):\n        content = x.__repr__()\n    elif __xr and isinstance(x, __xr.DataArray):\n        content = x.values.__repr__()\n    else:\n        content = str(x)\n\n    if len(content) > 150:\n        return content[:150] + " ..."\n    else:\n        return content\n\n\ndef _jupyterlab_variableinspector_is_matrix(x):\n    # True if type(x).__name__ in ["DataFrame", "ndarray", "Series"] else False\n    if __pd and isinstance(x, __pd.DataFrame):\n        return True\n    if __pd and isinstance(x, __pd.Series):\n        return True\n    if __np and isinstance(x, __np.ndarray) and len(x.shape) <= 2:\n        return True\n    if __pyspark and isinstance(x, __pyspark.sql.DataFrame):\n        return True\n    if __tf and isinstance(x, __tf.Variable) and len(x.shape) <= 2:\n        return True\n    if __tf and isinstance(x, __tf.Tensor) and len(x.shape) <= 2:\n        return True\n    if __torch and isinstance(x, __torch.Tensor) and len(x.shape) <= 2:\n        return True\n    if __xr and isinstance(x, __xr.DataArray) and len(x.shape) <= 2:\n        return True\n    if isinstance(x, list):\n        return True\n    return False\n\n\ndef _jupyterlab_variableinspector_is_widget(x):\n    return __ipywidgets and issubclass(x, __ipywidgets.DOMWidget)\n\n\ndef _jupyterlab_variableinspector_dict_list():\n    _check_imported()\n    def keep_cond(v):\n        try:\n            obj = eval(v)\n            if isinstance(obj, str):\n                return True\n            if __tf and isinstance(obj, __tf.Variable):\n                return True\n            if __pd and __pd is not None and (\n                isinstance(obj, __pd.core.frame.DataFrame)\n                or isinstance(obj, __pd.core.series.Series)):\n                return True\n            if __xr and __xr is not None and isinstance(obj, __xr.DataArray):\n                return True\n            if str(obj)[0] == "<":\n                return False\n            if  v in ['__np', '__pd', '__pyspark', '__tf', '__K', '__torch', '__ipywidgets', '__xr']:\n                return obj is not None\n            if str(obj).startswith("_Feature"):\n                # removes tf/keras objects\n                return False\n            return True\n        except:\n            return False\n    values = _jupyterlab_variableinspector_nms.who_ls()\n    vardic = [\n        {\n            'varName': _v,\n            'varType': type(eval(_v)).__name__, \n            'varSize': str(_jupyterlab_variableinspector_getsizeof(eval(_v))), \n            'varShape': str(_jupyterlab_variableinspector_getshapeof(eval(_v))) if _jupyterlab_variableinspector_getshapeof(eval(_v)) else '', \n            'varContent': str(_jupyterlab_variableinspector_getcontentof(eval(_v))), \n            'isMatrix': _jupyterlab_variableinspector_is_matrix(eval(_v)),\n            'isWidget': _jupyterlab_variableinspector_is_widget(type(eval(_v)))\n        }\n        for _v in values if keep_cond(_v)\n    ]\n    return json.dumps(vardic, ensure_ascii=False)\n\n\ndef _jupyterlab_variableinspector_getmatrixcontent(x, max_rows=10000):\n    # to do: add something to handle this in the future\n    threshold = max_rows\n\n    if __pd and __pyspark and isinstance(x, __pyspark.sql.DataFrame):\n        df = x.limit(threshold).toPandas()\n        return _jupyterlab_variableinspector_getmatrixcontent(df.copy())\n    elif __np and __pd and type(x).__name__ == "DataFrame":\n        if threshold is not None:\n            x = x.head(threshold)\n        x.columns = x.columns.map(str)\n        return x.to_json(orient="table", default_handler=_jupyterlab_variableinspector_default, force_ascii=False)\n    elif __np and __pd and type(x).__name__ == "Series":\n        if threshold is not None:\n            x = x.head(threshold)\n        return x.to_json(orient="table", default_handler=_jupyterlab_variableinspector_default, force_ascii=False)\n    elif __np and __pd and type(x).__name__ == "ndarray":\n        df = __pd.DataFrame(x)\n        return _jupyterlab_variableinspector_getmatrixcontent(df)\n    elif __tf and (isinstance(x, __tf.Variable) or isinstance(x, __tf.Tensor)):\n        df = __K.get_value(x)\n        return _jupyterlab_variableinspector_getmatrixcontent(df)\n    elif __torch and isinstance(x, __torch.Tensor):\n        df = x.cpu().numpy()\n        return _jupyterlab_variableinspector_getmatrixcontent(df)\n    elif __xr and isinstance(x, __xr.DataArray):\n        df = x.to_numpy()\n        return _jupyterlab_variableinspector_getmatrixcontent(df)\n    elif isinstance(x, list):\n        s = __pd.Series(x)\n        return _jupyterlab_variableinspector_getmatrixcontent(s)\n\n\ndef _jupyterlab_variableinspector_displaywidget(widget):\n    display(widget)\n\n\ndef _jupyterlab_variableinspector_default(o):\n    if isinstance(o, __np.number): return int(o)  \n    raise TypeError\n\n\ndef _jupyterlab_variableinspector_deletevariable(x):\n    exec("del %s" % x, globals())\n`;u.r_script=`library(repr)\n\n.ls.objects = function (pos = 1, pattern, order.by, decreasing = FALSE, head = FALSE, \n    n = 5) \n{\n    napply <- function(names, fn) sapply(names, function(x) fn(get(x, \n        pos = pos)))\n    names <- ls(pos = pos, pattern = pattern)\n    if (length(names) == 0) {\n        return(jsonlite::toJSON(data.frame()))\n    }\n    obj.class <- napply(names, function(x) as.character(class(x))[1])\n    obj.mode <- napply(names, mode)\n    obj.type <- ifelse(is.na(obj.class), obj.mode, obj.class)\n    obj.size <- napply(names, object.size)\n    obj.dim <- t(napply(names, function(x) as.numeric(dim(x))[1:2]))\n    obj.content <- rep("NA", length(names))\n    has_no_dim <- is.na(obj.dim)[1:length(names)]                        \n    obj.dim[has_no_dim, 1] <- napply(names, length)[has_no_dim]\n    vec <- (obj.type != "function")\n    obj.content[vec] <- napply(names[vec], function(x) toString(x, width = 154)[1])\n                      \n    obj.rownames <- napply(names, rownames)\n    has_rownames <- obj.rownames != "NULL"\n    obj.rownames <- sapply(obj.rownames[has_rownames], function(x) paste(x,\n        collapse=", "))\n    obj.rownames.short <- sapply(obj.rownames, function(x) paste(substr(x, 1, 150), "...."))\n    obj.rownames <- ifelse(nchar(obj.rownames) > 154, obj.rownames.short, obj.rownames)\n    obj.rownames <- sapply(obj.rownames, function(x) paste("Row names: ",x))\n    obj.content[has_rownames] <- obj.rownames\n                               \n                               \n    obj.colnames <- napply(names, colnames)\n    has_colnames <- obj.colnames != "NULL"\n    obj.colnames <- sapply(obj.colnames[has_colnames], function(x) paste(x, \n        collapse = ", "))\n    obj.colnames.short <- sapply(obj.colnames, function(x) paste(substr(x, \n        1, 150), "...."))\n    obj.colnames <- ifelse(nchar(obj.colnames) > 154, obj.colnames.short, \n        obj.colnames)\n    obj.colnames <- sapply(obj.colnames, function(x) paste("Column names: ",x))\n                    \n    obj.content[has_colnames] <- obj.colnames\n                           \n    is_function <- (obj.type == "function")\n    obj.content[is_function] <- napply(names[is_function], function(x) paste(strsplit(repr_text(x),")")[[1]][1],")",sep=""))\n    obj.content <- unlist(obj.content, use.names = FALSE)\n    \n\n    out <- data.frame(obj.type, obj.size, obj.dim)\n    names(out) <- c("varType", "varSize", "Rows", "Columns")\n    out$varShape <- paste(out$Rows, " x ", out$Columns)\n    out$varContent <- obj.content\n    out$isMatrix <- FALSE\n    out$varName <- row.names(out)\n    out <- out[, !(names(out) %in% c("Rows", "Columns"))]\n    rownames(out) <- NULL\n    print(out)\n    if (!missing(order.by)) \n        out <- out[order(out[[order.by]], decreasing = decreasing), \n            ]\n    if (head) \n        out <- head(out, n)\n    jsonlite::toJSON(out)\n}\n\n.deleteVariable <- function(x) {\n    remove(list=c(x), envir=.GlobalEnv)\n}\n    `;u.scripts={python3:{initScript:u.py_script,queryCommand:"_jupyterlab_variableinspector_dict_list()",matrixQueryCommand:"_jupyterlab_variableinspector_getmatrixcontent",widgetQueryCommand:"_jupyterlab_variableinspector_displaywidget",deleteCommand:"_jupyterlab_variableinspector_deletevariable"},python2:{initScript:u.py_script,queryCommand:"_jupyterlab_variableinspector_dict_list()",matrixQueryCommand:"_jupyterlab_variableinspector_getmatrixcontent",widgetQueryCommand:"_jupyterlab_variableinspector_displaywidget",deleteCommand:"_jupyterlab_variableinspector_deletevariable"},python:{initScript:u.py_script,queryCommand:"_jupyterlab_variableinspector_dict_list()",matrixQueryCommand:"_jupyterlab_variableinspector_getmatrixcontent",widgetQueryCommand:"_jupyterlab_variableinspector_displaywidget",deleteCommand:"_jupyterlab_variableinspector_deletevariable"},R:{initScript:u.r_script,queryCommand:".ls.objects()",matrixQueryCommand:".ls.objects",widgetQueryCommand:"TODO",deleteCommand:".deleteVariable"},scala:{initScript:"_root_.almond.api.JupyterAPIHolder.value.VariableInspector.init()",queryCommand:"_root_.almond.api.JupyterAPIHolder.value.VariableInspector.dictList()",matrixQueryCommand:"",widgetQueryCommand:"",deleteCommand:""}};class m{constructor(e){this._kernelRestarted=new c.Signal(this);this._session=e.session;this._session.statusChanged.connect(((e,n)=>{switch(n){case"restarting":case"autorestarting":this._kernelRestarted.emit(this._session.ready);break;default:break}}))}get kernelRestarted(){return this._kernelRestarted}get kernelLanguage(){var e;if(!((e=this._session.session)===null||e===void 0?void 0:e.kernel)){return Promise.resolve("")}return this._session.session.kernel.info.then((e=>e.language_info.name))}get kernelName(){return this._session.kernelDisplayName}get ready(){return this._session.ready}get iopubMessage(){return this._session.iopubMessage}fetch(e,n){var t;const r=(t=this._session.session)===null||t===void 0?void 0:t.kernel;if(!r){return Promise.reject(new Error("Require kernel to perform variable inspection!"))}const s=r.requestExecute(e);s.onIOPub=e=>{n(e)};return s.done}execute(e){var n;if(!((n=this._session.session)===null||n===void 0?void 0:n.kernel)){throw new Error("No session available.")}return this._session.session.kernel.requestExecute(e)}}class h{constructor(){this._source=null;this._panel=null;this._handlers={}}hasHandler(e){if(this._handlers[e]){return true}else{return false}}getHandler(e){return this._handlers[e]}addHandler(e){this._handlers[e.id]=e}get panel(){return this._panel}set panel(e){if(this.panel===e){return}this._panel=e;if(e&&!e.source){e.source=this._source}}get source(){return this._source}set source(e){if(this._source===e){return}if(this._source){this._source.disposed.disconnect(this._onSourceDisposed,this)}this._source=e;if(this._panel&&!this._panel.isDisposed){this._panel.source=this._source}if(this._source){this._source.disposed.connect(this._onSourceDisposed,this)}}_onSourceDisposed(){this._source=null}}var b=t(25184);var f=t(1143);const y="jp-VarInspector-title";const x="jp-VarInspector";const v="jp-VarInspector-table";const g="jp-VarInspector-content";class j extends f.Widget{constructor(){super();this._source=null;this.addClass(x);this._title=w.createTitle();this._title.className=y;this._table=w.createTable();this._table.className=v;this.node.appendChild(this._title);this.node.appendChild(this._table)}get source(){return this._source}set source(e){if(this._source===e){return}if(this._source){this._source.inspected.disconnect(this.onInspectorUpdate,this);this._source.disposed.disconnect(this.onSourceDisposed,this)}this._source=e;if(this._source){this._source.inspected.connect(this.onInspectorUpdate,this);this._source.disposed.connect(this.onSourceDisposed,this);this._source.performInspection()}}dispose(){if(this.isDisposed){return}this.source=null;super.dispose()}onInspectorUpdate(e,n){var t;if(!this.isAttached){return}const r=n.title;const s=n.payload;if(r.contextName){this._title.innerHTML=r.contextName}else{this._title.innerHTML="    Inspecting '"+r.kernelName+"' "+r.contextName}let a;this._table.deleteTFoot();this._table.createTFoot();this._table.tFoot.className=g;for(let i=0;i<s.length;i++){const e=s[i];const n=e.varName;const r=e.varType;a=this._table.tFoot.insertRow();let c=a.insertCell(0);c.title="Delete Variable";c.className="jp-VarInspector-deleteButton";const l=o.closeIcon.element();l.onclick=e=>{var t;(t=this.source)===null||t===void 0?void 0:t.performDelete(n)};c.append(l);c=a.insertCell(1);if(e.isMatrix){c.title="View Contents";c.className="jp-VarInspector-inspectButton";const e=o.searchIcon.element();e.onclick=e=>{var t;console.log("Click on "+n);(t=this._source)===null||t===void 0?void 0:t.performMatrixInspection(n).then((e=>{this._showMatrix(e,n,r)}))};c.append(e)}else{c.innerHTML=""}c=a.insertCell(2);c.className="jp-VarInspector-varName";c.innerHTML=n;c=a.insertCell(3);c.innerHTML=r;c=a.insertCell(4);c.innerHTML=e.varSize;c=a.insertCell(5);c.innerHTML=e.varShape;c=a.insertCell(6);const _=(t=this._source)===null||t===void 0?void 0:t.rendermime;if(e.isWidget&&_){const n=new b.OutputAreaModel({trusted:true});const t=new b.SimplifiedOutputArea({model:n,rendermime:_});t.future=this._source.performWidgetInspection(e.varName);f.Widget.attach(t,c)}else{c.innerHTML=w.escapeHtml(e.varContent).replace(/\\n/g,"</br>")}}}onSourceDisposed(e,n){this.source=null}_showMatrix(e,n,t){const r=new l.DataGrid({defaultSizes:{rowHeight:32,columnWidth:128,rowHeaderWidth:64,columnHeaderHeight:32}});r.dataModel=e;r.title.label=t+": "+n;r.title.closable=true;const s=this.parent.layout;s.addWidget(r,{mode:"split-right"})}}var w;(function(e){const n=new Map(Object.entries({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;"}));function t(e){return String(e).replace(/[&<>"'/]/g,(e=>n.get(e)))}e.escapeHtml=t;function r(){const e=document.createElement("table");e.createTHead();const n=e.tHead.insertRow(0);const t=n.insertCell(0);t.innerHTML="";const r=n.insertCell(1);r.innerHTML="";const s=n.insertCell(2);s.innerHTML="Name";const a=n.insertCell(3);a.innerHTML="Type";const i=n.insertCell(4);i.innerHTML="Size";const o=n.insertCell(5);o.innerHTML="Shape";const c=n.insertCell(6);c.innerHTML="Content";return e}e.createTable=r;function s(e=""){const n=document.createElement("p");n.innerHTML=e;return n}e.createTitle=s})(w||(w={}));var C=t(5592);const k=new C.Token("jupyterlab_extension/variableinspector:IVariableInspectorManager");const S=new C.Token("jupyterlab_extension/variableinspector:IVariableInspector");var N;(function(e){e.open="variableinspector:open"})(N||(N={}));const T={id:"@lckr/jupyterlab_variableinspector",requires:[r.ICommandPalette,s.ILayoutRestorer,s.ILabShell],provides:k,autoStart:true,activate:(e,n,t,s)=>{const a=new h;const i="Variable Inspector";const c=N.open;const l="Open Variable Inspector";const _="variableinspector";const p=new r.WidgetTracker({namespace:_});function d(){const e=new j;e.id="jp-variableinspector";e.title.label="Variable Inspector";e.title.icon=o.listIcon;e.title.closable=true;e.disposed.connect((()=>{if(a.panel===e){a.panel=null}}));p.add(e);return e}t.restore(p,{command:c,args:()=>({}),name:()=>"variableinspector"});e.commands.addCommand(c,{label:l,execute:()=>{if(!a.panel||a.panel.isDisposed){a.panel=d()}if(!a.panel.isAttached){s.add(a.panel,"main")}if(a.source){a.source.performInspection()}s.activateById(a.panel.id)}});n.addItem({command:c,category:i});console.log("JupyterLab extension @lckr/jupyterlab_variableinspector is activated!");return a}};const I={id:"@lckr/jupyterlab-variableinspector:consoles",requires:[k,a.IConsoleTracker,s.ILabShell],autoStart:true,activate:(e,n,t,r)=>{const s={};t.widgetAdded.connect(((e,t)=>{if(n.hasHandler(t.sessionContext.path)){s[t.id]=new Promise(((e,r)=>{e(n.getHandler(t.sessionContext.path))}))}else{s[t.id]=new Promise(((e,r)=>{const a=t.sessionContext;const i=new m({session:a});const o=i.ready.then((()=>i.kernelLanguage.then((e=>u.getScript(e)))));o.then((r=>{const o=r.initScript;const c=r.queryCommand;const l=r.matrixQueryCommand;const _=r.widgetQueryCommand;const d=r.deleteCommand;const u={queryCommand:c,matrixQueryCommand:l,widgetQueryCommand:_,deleteCommand:d,connector:i,initScript:o,id:a.path};const m=new p(u);n.addHandler(m);t.disposed.connect((()=>{delete s[t.id];m.dispose()}));m.ready.then((()=>{e(m)}))}));o.catch((n=>{console.log(n);const r=new d(i);t.disposed.connect((()=>{delete s[t.id];r.dispose()}));e(r)}))}))}a(r)}));const a=(e,r)=>{var a;const i=(a=r===null||r===void 0?void 0:r.newValue)!==null&&a!==void 0?a:e.currentWidget;if(!i||!t.has(i)){return}const o=s[i.id];o.then((e=>{if(e){n.source=e;n.source.performInspection()}}))};a(r);r.currentChanged.connect(a);e.contextMenu.addItem({command:N.open,selector:".jp-CodeConsole"})}};const D={id:"@lckr/jupyterlab-variableinspector:notebooks",requires:[k,i.INotebookTracker,s.ILabShell],autoStart:true,activate:(e,n,t,r)=>{const s={};t.widgetAdded.connect(((e,t)=>{s[t.id]=new Promise(((e,r)=>{const a=t.sessionContext;const i=new m({session:a});const o=t.content.rendermime;const c=i.ready.then((async()=>{const e=await i.kernelLanguage;return u.getScript(e)}));c.then((r=>{const c=r.initScript;const l=r.queryCommand;const _=r.matrixQueryCommand;const d=r.widgetQueryCommand;const u=r.deleteCommand;const m={queryCommand:l,matrixQueryCommand:_,widgetQueryCommand:d,deleteCommand:u,connector:i,rendermime:o,initScript:c,id:a.path};const h=new p(m);n.addHandler(h);t.disposed.connect((()=>{delete s[t.id];h.dispose()}));h.ready.then((()=>{e(h)}))}));c.catch((e=>{r(e)}))}));a(r)}));const a=(e,r)=>{var a;const i=(a=r===null||r===void 0?void 0:r.newValue)!==null&&a!==void 0?a:e.currentWidget;if(!i||!t.has(i)||i.isDisposed){return}const o=s[i.id];o===null||o===void 0?void 0:o.then((e=>{if(e){n.source=e;n.source.performInspection()}}))};a(r);r.currentChanged.connect(a);e.contextMenu.addItem({command:N.open,selector:".jp-Notebook"})}};const M=[T,I,D];const L=M}}]);
//# sourceMappingURL=3147.87ef8d86babfd3a9868f.js.map?v=87ef8d86babfd3a9868f